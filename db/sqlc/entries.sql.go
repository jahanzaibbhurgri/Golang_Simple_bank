// Code generated by sqlc. DO NOT EDIT.
// source: entries.sql

package db

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
  owner,
  account_id,
  balance,
  currency
) VALUES (
  $1, $2, $3 ,$4
) RETURNING id, owner, account_id, balance, currency, created_at
`

type CreateEntryParams struct {
	Owner     string `json:"owner"`
	AccountID int32  `json:"account_id"`
	Balance   int64  `json:"balance"`
	Currency  string `json:"currency"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry,
		arg.Owner,
		arg.AccountID,
		arg.Balance,
		arg.Currency,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AccountID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM entries
WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const getEntry = `-- name: GetEntry :one
SELECT id, owner, account_id, balance, currency, created_at FROM entries
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AccountID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, owner, account_id, balance, currency, created_at FROM entries
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.AccountID,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntries = `-- name: UpdateEntries :one
UPDATE entries
SET balance = $2
WHERE id = $1
RETURNING id, owner, account_id, balance, currency, created_at
`

type UpdateEntriesParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateEntries(ctx context.Context, arg UpdateEntriesParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntries, arg.ID, arg.Balance)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.AccountID,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
